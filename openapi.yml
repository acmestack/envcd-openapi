openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/acmestack/envcd-project/1.0.0
info:
  description: acmestack envcd openapd document
  version: "1.0.0"
  title: envcd openapi
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
paths:
  /login:
    post:
      tags:
        - login
      summary: user login into the system
      operationId: login
      parameters:
        - name: username
          in: query
          description: The user name for login, this is required.
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text, this is required.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccess'
        '400':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginFailed'
  /logout:
    get:
      tags:
        - logout
      summary: Logs out current logged in user session
      operationId: logout
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
      responses:
        '200':
          description: logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logout'
        '400':
          description: create success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultFailed'
  /v1/users:
    post:
      tags:
        - user
      summary: create user
      description: This can only be done by the logged in user(admin/super).
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
      responses:
        '200':
          description: create success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultSuccess'
        '400':
          description: create success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultFailed'
  /v1/users/pageNum/{pageNum}/pageSize/{pageSize}:
    get:
      tags:
        - user
      summary: get pageable users
      description: This can only be done by the logged in user(admin/super).
      operationId: users
      parameters:
        - name: pageNum
          in: path
          description: page number
          required: true
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: path
          description: page size
          required: true
          schema:
            type: integer
            default: 10
      responses:
        default:
          description: query users success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserVO'
  '/v1/users/{userId}':
    put:
      tags:
        - user
      summary: update user by id
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultSuccess'
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultFailed'
    get:
      tags:
        - user
      summary: get user by id
      operationId: userById
      parameters:
        - name: userId
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: delete user
      description: This can only be done by the logged in user(admin/super).
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: user delete successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultSuccess'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultFailed'
  '/v1/users/{userId}/scopespaces':
    get:
      tags:
        - user
      summary: get user's scopesapce by user id
      operationId: userScopeSpaces
      parameters:
        - name: userId
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeSpace'
            application/xml:
              schema:
                $ref: '#/components/schemas/ScopeSpace'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  '/v1/users/{userId}/scopespace/{scopeSpaceId}/dictionaries':
    get:
      tags:
        - user
      summary: get dictionaries by userId and scopeSpaceId
      operationId: userDictionariesUnderScopeSpace
      parameters:
        - name: userId
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: integer
        - name: scopeSpaceId
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  "/v1/users/{userId}/dictionaries":
    get:
      tags:
        - user
      summary: Get dictionaries by id
      operationId: userDictionaries
      parameters:
        - name: userId
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  '/v1/scopespaces/pageNum/{pageNum}/pageSize/{pageSize}':
    get:
      tags:
        - envcd scopespaces
      summary: get all scopespaces
      operationId: scopespaces
      parameters:
        - name: pageNum
          in: path
          description: page number
          required: true
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: path
          description: page size
          required: true
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeSpaceVO'
            application/xml:
              schema:
                $ref: '#/components/schemas/ScopeSpaceVO'
        '400':
          description: Invalid Order
  '/v1/scopespaces':
    post:
      tags:
        - envcd scopespaces
      summary: update user's application
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScopeSpaceDTO'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultSuccess'
        '400':
          description: Invalid Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultFailed'
  '/v1/scopespaces/{scopeSpaceId}':
    get:
      tags:
        - envcd scopespaces
      summary: get scopespaces by scopeSpaceId
      parameters:
        - name: scopeSpaceId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeSpace'
        '400':
          description: Invalid Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeSpace'
    put:
      tags:
        - envcd scopespaces
      summary: update scopesapce by scopeSpaceId
      parameters:
        - name: scopeSpaceId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScopeSpaceDTO'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultSuccess'
        '400':
          description: Invalid Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultFailed'
    delete:
      tags:
        - envcd scopespaces
      summary: delete scopesapce by scopeSpaceId
      parameters:
        - name: scopeSpaceId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultSuccess'
        '400':
          description: Invalid Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultFailed'
  '/v1/dictionaries/pageNum/{pageNum}/pageSize/{pageSize}':
    get:
      tags:
        - envcd dictionaries
      summary: create dictionaries
      operationId: createDictionary
      parameters:
        - name: pageNum
          in: path
          description: page number
          required: true
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: path
          description: page size
          required: true
          schema:
            type: integer
            default: 10
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DictionaryDTO'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid Order
    post:
      tags:
        - envcd dictionaries
      summary: get all dictionaries
      operationId: dictionaries
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid Order
  '/v1/dictionaries/{dictionaryId}':
    get:
      tags:
        - envcd dictionaries
      summary: query dictionaries by dictionaryId
      operationId: dictionary
      parameters:
        - name: dictionaryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationConfig'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApplicationConfig'
        '400':
          description: Invalid Order
    put:
      tags:
        - envcd dictionaries
      summary: update dictionary
      operationId: updateDictionary
      parameters:
        - name: dictionaryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                configValue:
                  description: config value
                  type: string
                version:
                  description: config version
                  type: string
                state:
                  description: update application state
                  type: boolean
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid Order
    delete:
      tags:
        - envcd dictionaries
      summary: delete dictionaries by dictionaryId
      operationId: removeDictionary
      parameters:
        - name: dictionaryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid Order
components:
  schemas:
    DefaultSuccess:
      type: object
      properties:
        code:
          type: string
          default: "success"
        message:
          type: string
          default: "success"
    DefaultFailed:
      type: object
      properties:
        code:
          type: string
          default: "failure"
        message:
          type: string
          default: "failure"
    LoginSuccess:
      type: object
      properties:
        code:
          type: string
          example: loginSuccess
        message:
          type: string
          example: login success!
        data:
          properties:
            accessToken:
              type: string
              example: "afuaaj1ddf"
            userId:
              type: string
              example: 1
    LoginFailed:
      type: object
      properties:
        code:
          type: string
          example: loginFailed
        message:
          type: string
          example: login failed!
    Logout:
      type: object
      properties:
        code:
          type: string
          example: logout
        message:
          type: string
          example: logout!
    # UserDTO
    User:
      type: object
      properties:
        name:
          type: string
          default: "ming"
          description: when update, username can't edit
        password:
          type: string
          default: "123456"
        identity:
          type: string
          default: "admin"
        state:
          type: string
          default: "enabled"
          description: user state
    # UserVO: pageable users
    UserVO:
      type: object
      properties:
        code:
          type: string
          example: success
        message:
          type: string
          example: success
        data:
          properties:
            total:
              type: integer
            currentPage:
              type: integer
            pages:
              type: integer
            users:
              type: array
              example: ['#/components/schemas/UserEntity']
    # UserEntityVO
    UserEntity:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        identity:
          type: string
        state:
          type: string
        createAt:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        updateAt:
            type: string
            format: date-time
            example: '2016-08-29T09:12:33.001Z'
      xml:
        name: UserEntity
    # ScopeSpaceVO: pageable ScopeSpaceVO
    ScopeSpaceVO:
      type: object
      properties:
        code:
          type: string
          example: success
        message:
          type: string
          example: success
        data:
          properties:
            total:
              type: integer
            currentPage:
              type: integer
            pages:
              type: integer
            scopespaces:
               type: array
               example: [ '#/components/schemas/UserEntity' ]
    ScopeSpaceDTO:
      type: object
      properties:
        name:
          type: string
        note:
          type: string
        state:
          type: boolean
    ScopeSpace:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        note:
          type: string
        state:
          type: boolean
        edit:
          type: boolean
          description: edit enable
        createdAt:
          type: string
          description: create time
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        updateAt:
          type: string
          description: update time
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
      xml:
        name: Order
    DictionaryVO:
      type: object
      properties:
        code:
          type: string
          example: success
        message:
          type: string
          example: success
        data:
          properties:
            total:
              type: integer
            currentPage:
              type: integer
            pages:
              type: integer
            dictionaries:
              type: array
              example: [ '#/components/schemas/UserEntity' ]
    DictionaryDTO:
        type: object
        properties:
          dictKey:
            type: string
            example: "spring"
          dictVal:
            type: string
            example: "id=ming"
          state:
            type: boolean
            example: true
    Dictionary:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          example: 1
        userId:
          type: integer
          example: 1
        scopeSpaceId:
          type: integer
          example: 1
        dictKey:
          type: string
          example: "spring"
        dictVal:
          type: string
          example: "id=ming"
        state:
          type: boolean
          example: true
        createAt:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        updateAt:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
